#!/usr/bin/env python
# coding=utf-8

from asn1crypto.x509 import Certificate

def dict2str(d):
    tmp = []
    for i, j in d.items():
        try:
            j = hex(j)[2:].rstrip('L')
        except TypeError:
            pass
        tmp.append((i, j))
    return '&'.join(map(lambda i: '='.join(i), tmp))

def parse_der(data):
    cert = Certificate.load(data)
    d = cert.native
    res = {}
    if d.has_key('tbs_certificate'):
        tbs = d['tbs_certificate']
        res['tls_version'] = tbs['version']
        res['tls_serial_number'] = hex(tbs['serial_number'])[2:].rstrip('L')
        res['sig_algo'] = tbs['signature']['algorithm']
        res['tls_issuer'] = dict2str(tbs['issuer'])
        res['not_valid_before'] = str(tbs['validity']['not_before'])
        res['not_valid_after'] = str(tbs['validity']['not_after'])
        pubkey = tbs['subject_public_key_info']
        res['pubkey_algo'] = pubkey['algorithm']['algorithm']
        res['pubkey_param'] = dict2str(pubkey['public_key'])
    return res

if __name__ == '__main__':
    from pprint import pprint
    pprint(parse_der('0\x82\x02\xb20\x82\x01\x9a\xa0\x03\x02\x01\x02\x02\t\x00\xc0)C\x9a\x8a\xd4[30\r\x06\t*\x86H\x86\xf7\r\x01\x01\x0b\x05\x000\x111\x0f0\r\x06\x03U\x04\x03\x0c\x06ubuntu0\x1e\x17\r161204075445Z\x17\r261202075445Z0\x111\x0f0\r\x06\x03U\x04\x03\x0c\x06ubuntu0\x82\x01"0\r\x06\t*\x86H\x86\xf7\r\x01\x01\x01\x05\x00\x03\x82\x01\x0f\x000\x82\x01\n\x02\x82\x01\x01\x00\xa9\xc5\t\xc4Q\xf1\xf1\x08\x07\xdci\xec\x1d\xa9\xd3?\xdag\xb6F\n\xaeO\x84\x90\x14N\x96\xeae\xeb\xfbT\xdd\xe1\x8a\xaa\x12\n2I\x97\xb5B\x8b\xecwK\xea\x8d[r\x82\xa4\x17;\xb6N\xcf=\xe8\x9c\x83:\x00\xa8\xd8L\x86m\x9f\xad\x9c\xd3\xbcSU@\xf8\xfb\x92\xc6\xea\xe7\xac\x1b\xb0\x86~g\xbao\x94\xbfYE\xea>\xf1\xad\xab\xcc\xbd\x0f\xc3\xb6\n\xa9\x8e\xc7N\xd4\xed\xef\xd8\x93\xc6p\xd5\xe4\xd0\xebG"\x18\x14\n\xeb\xb8\xba\xd1\xd2<a\x1f\x9c4\x1dX\xcd\xc3\x04\x979G\x9e\xa8\xa7f\xf1\x1dh\xa8\x8bv\xbcX\x1b\xc3x(b\nm\x99\x0f\xa0P\x86#\xfe\x96\xc0\xf8\x10\x02\x05\xe5\x0ex\xc2\xaea\xef\xf8\xb2W\xe9\xf1\xa2\xc1\'\x8c\x08\x18,\xc0\xc1\\)#\xa3\x05\xb6x\xea\xa5uKC\x1c\xda\xf3\xa1\x077\xa1\xf9~\xda\xe1\xd7\xbf\x15%\x9f\x92wN\xc4\xdaR9#\xa8\xc7\xa6\x87\xf7\xd0\x1f\xceSM\xad\x048\x1e\xba\xe9Gx\x8c\xbb\xd9C\x02\x03\x01\x00\x01\xa3\r0\x0b0\t\x06\x03U\x1d\x13\x04\x020\x000\r\x06\t*\x86H\x86\xf7\r\x01\x01\x0b\x05\x00\x03\x82\x01\x01\x00\x9f6\x1ccdW\xd8\x88V\x13d\xab\xcd\xcc\x8e\xb5\x15\x04\xa1\x03\xb0\xa7u}$Wn\xf7m\xbd\xdc\xec\xf7\xc8\xd1\xda\xe1}\xf8\x1a.f\x00"5\xa7<`Kp!\x103\x0b\xc9\xbb~\xb8\xa5d\x95\x89\x98\xff\xc8\xa5\\\xda\x94F\x07"\x07zs\x07p\xa67P\xfe\xf45O\xe5\x1aa&\xe2\xe2\xfd\xc7\xc29\x83!\xe6\xcd,\x8c\xf2\xe9Z\xb4\xc3\xc5\xa9\x99\x8f\xd2\xe5Y\xb4,\xfc\x87<!\xb2.\xc4c6\x8e&\x93\xbd\xcffRF\xeab\n\xd9\xaf\xf2\xd95\x94\x111[\xbfzN\xed\t\x83\x8a\xdfmz\xd2G8#\xe5\xfa\xba@\xcb7\x93\x14\x93\xae|f`\xc4\x8d\x06\xb4E\xf0\xe5j\x10\xf2\xf8\xbc\xe3j\xd5C_0\x9b\n2\xf7\xe9\xbaN0.s\xe30:\xda\x1d\x0c\x04\xc1\xdfw\x05\x93\xe2\x00\x15s\x13Y\xdb\xf1\x87&v,\xd9\x07\x10\x9e\x900\xae\x03s\xfa\x80\xb1\xdf\x0f\x0c\x9d\xa4\xe9\xf8\x8b\x07\xdd6Y\x94E>\xdbs\x06$\xf5\xc0`'))
